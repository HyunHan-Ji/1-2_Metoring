public class h3 {

	private int sort[][];
	private int copy[];

	h3() {// 디폴트 생성자
	}

	h3(int sort[], int sort1[]) {
		this.sort = new int[2][10];// 2차원배열에 입력
		this.sort[0] = sort;
		this.sort[1] = sort1;
		this.copy = new int[20];
	}

	public void printSort() {// 1.print
		for (int i = 0; i < sort.length; i++) {// sort배열 출력
			System.out.print("sort" + (i + 1) + " ");
			for (int j = 0; j < sort[i].length; j++) {
				System.out.print(sort[i][j] + " ");
			}
			System.out.println();
		}
		System.out.print("copy "); // copy배열 출력
		for (int i = 0; i < copy.length; i++) {
			System.out.print(copy[i] + " ");
		}
		System.out.println();
	}

	public void sort(int n) { // 2.select
		if (n == 0||n==1) { // sort0 ㄸ는 sort1 정렬
			for (int i = 0; i < sort[n].length; i++) {
				for (int j = i + 1; j < sort[n].length; j++) {
					if (sort[n][i] > sort[n][j]) {
						int temp = sort[n][i];
						sort[n][i] = sort[n][j];
						sort[n][j] = temp;
					}
				}
			}
		} else if (n == 2) {// copy 정렬
			for (int i = 0; i < copy.length; i++) {
				for (int j = i + 1; j < copy.length; j++) {
					if (copy[i] > copy[j]) {
						int temp = copy[i];
						copy[i] = copy[j];
						copy[j] = temp;
					}
				}
			}
		}
	}

	public void HapSort() {// 3.배열 합치기
		for (int i = 0; i < copy.length; i++) {
			if (i < 10) {
				copy[i] = sort[0][i];
			} else {
				copy[i] = sort[1][i - 10];
			}
		}
	}

	public String findSort(int key) {// 4.숫자 찾기
		if (this.copy[0] == 0) {
			System.out.println("Hap sort 를 사용하지 않았으므로 기존 배열에서 찾습니다.");
			for (int i = 0; i < sort.length; i++) {
				for (int j = 0; j < sort[i].length; j++) {
					if (sort[i][j] == key) {
						return "sort[" + (i + 1) + "]에 [" + (j + 1) + "]번째에 있습니다";
					}
				}
			}
		} else {
			for (int i = 0; i < copy.length; i++) {
				if (copy[i] == key) {
					return "copy[" + i + "]번째에 있습니다.";
				}
			}
		}
		return "없습니다";
	}
}


import java.util.*;

public class h3test {

	public static void main(String[] args) {

		int sort1[] = { 1, 19, 16, 5, 8, 17, 2, 6, 11, 10 };
		int sort2[] = { 18, 3, 9, 14, 20, 12, 15, 7, 13, 4 };
		h3 pr = new h3(sort1, sort2);
		Scanner scan = new Scanner(System.in);
		while (true) {
			System.out.println("----------Menun----------");
			System.out.println("1.print");
			System.out.println("2.select sort");
			System.out.println("3.Hap sort");
			System.out.println("4.fine key");
			System.out.println("5.Exit");
			int num = scan.nextInt();
			if (num == 5) {
				break;
			}
			switch (num) {
			case 1:
				pr.printSort();
				break;
			case 2:
				System.out
						.println("정렬할 소트번호입력  sort1 =1  sort2=2 s Hapsort=3(메뉴 3번 했을 경우에만) ");
				int select = scan.nextInt();
				pr.sort(select - 1);
				break;
			case 3:
				pr.HapSort();
				break;
			case 4:
				System.out.println("찾는 숫자 입력");
				int digit = scan.nextInt();
				String result = pr.findSort(digit);
				System.out.println("찾는 숫자  " + digit + "는 " + result);
				break;
			}

		}

	}
}





public class Personinfo {
	private String name;// 문제 맞힐 이름
	private char answer[];// 문제 맞혔는지 O X
	private int count = 0;// answer배열의 인덱스 위치
	private static int countNum = 0;// 객체생성 횟수

	Personinfo(String name) {
		this.name = name;
		answer = new char[5];
		countNum++;
	}

	public void an(int an_swer, int A) {// 정답확인
		if (an_swer == A) {
			answer[count] = 'O';
		} else {
			answer[count] = 'X';
		}
		count++;
	}

	public int Gugu(int op1, int op2) {// 정답계산
		return op1 * op2;
	}

	public void check() {// 출력
		int CrCount = 0;
		for (int i = 0; i < answer.length; i++) {
			System.out.println((i + 1) + "번 : " + answer[i]);
			if (answer[i] == 'O') {
				CrCount++;
			}
		}
		System.out.println("맞춘 개수 : " + CrCount);
	}

	public String getName() {
		return this.name;
	}

	public static int getCountNum() {
		return countNum;
	}
}



import java.util.*;

public class PersoninfoTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan = new Scanner(System.in);
		Personinfo ex1;
		System.out.println("곱셈 문제 풀기, 문제는 5문제 입니다.");
		System.out.println("사용자 이름 입력");
		ex1 = new Personinfo(scan.next());
		final int Question = 5;

		while (true) {
			System.out.println("도전하시겠습니까?  1.도전 2.쫄보");
			int num = scan.nextInt();
			if (num == 1) { // 1.도전
				for (int i = 0; i < Question; i++) { // Question만큼 반복
					int op1 = (int) (Math.random() * 8 + 2);
					int op2 = (int) (Math.random() * 9 + 1);
					System.out.println(op1 + " * " + op2 + " ? ");
					int answer = scan.nextInt(); // 사용자 답
					int correct = ex1.Gugu(op1, op2); // 정답
					ex1.an(answer, correct); // 정답확인
				}
				System.out.println(ex1.getName() + "님 맞춘 개수");
				ex1.check();// 맞춘개수 출력
			} else {
				System.out.println("쫄보네요 ㅂㅂ");
				break;
			}
		}
		System.out.println("총 도전 한 사람은" + Personinfo.getCountNum() + "명 입니다.");
	}

}
